{"ast":null,"code":"var _jsxFileName = \"/Users/thomaslefebvre/git/projet-jeudemot/src/components/view/WordFormB.jsx\";\nimport React from 'react';\nimport axios from 'axios';\nimport JResults from './JResults';\nimport { Form, Label, Input, Button, FormGroup, Spinner } from 'reactstrap';\nimport words from '../controller/words.json';\nimport { trackPromise } from 'react-promise-tracker';\nimport { withTranslation } from 'react-i18next';\nconst initialState = {\n  //value: '',\n  valueError: '',\n  answer: ''\n};\nexport default class WordFormB extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onTextChanged = event => {\n      this.setState({\n        value: event.target.value\n      });\n      console.log(event.target.value);\n      const value = event.target.value;\n      let suggestions = [];\n\n      if (value.length > 0) {\n        const regex = new RegExp(`^${value}`, 'i');\n        suggestions = this.items.sort().filter(v => regex.test(v));\n      }\n\n      this.setState(() => ({\n        suggestions,\n        text: value\n      }));\n    };\n\n    this.onAddItem = () => {\n      this.setState(state => {\n        const history = state.history.concat(state.value);\n        return {\n          history,\n          value: ''\n        };\n      });\n    };\n\n    this.validate = () => {\n      let valueError = '';\n\n      if (!this.state.value.match('^(\\w*)')) {\n        valueError = 'Invalid input, please put only one word without special characters';\n      }\n\n      if (valueError) {\n        this.setState({\n          valueError\n        });\n        return false;\n      }\n\n      return true;\n    };\n\n    this.handleRandomize = event => {\n      event.preventDefault();\n      axios.get('http://localhost:5000/randomize').then(response => {\n        const text = response.data;\n        console.log('---');\n        console.log(response.data); //this.setState({ value });\n\n        this.setState({\n          text: response.data\n        }); //self.setState({ value: response.data });\n        //Perform action based on response\n      }).catch(error => {\n        console.log(error);\n        console.log('dommage'); //Perform action based on error\n      });\n    };\n\n    this.updateInput = word => {\n      let value = word;\n      console.log(value);\n      this.setState({\n        value: \"third\"\n      });\n    };\n\n    this.state = {\n      value: '',\n      valueError: '',\n      answer: '',\n      history: [],\n      suggestions: [],\n      text: '',\n      loading: false\n    };\n    this.items = words;\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  suggestionSelected(value) {\n    this.setState(() => ({\n      text: value,\n      suggestions: []\n    }));\n  }\n\n  renderSuggestions() {\n    const suggestions = this.state.suggestions;\n\n    if (suggestions.length === 0) {\n      return null;\n    }\n\n    return React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, suggestions.map(item => React.createElement(\"li\", {\n      onClick: () => this.suggestionSelected(item),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, item)));\n  }\n\n  renderLoading() {\n    if (this.state.answer != null) {\n      return null;\n    }\n\n    return React.createElement(Spinner, {\n      animation: \"border\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Loading...\"));\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n    console.log(event.target.value);\n  }\n\n  handleSubmit(event) {\n    // testing purpose only\n    //alert('A name was submitted: ' + this.state.value);\n    event.preventDefault();\n    const isValid = this.validate();\n\n    if (isValid) {\n      console.log(this.state); // clear form\n\n      this.setState(initialState);\n    } //this.setState({history : this.state.value});\n    //this.onAddItem();\n    //console.log(this.state);\n\n\n    var self = this;\n    trackPromise(axios.post('http://localhost:5000/sendform', this.state.text, {\n      headers: {\n        'Content-Type': 'text/plain'\n      }\n    }).then(function (response) {\n      console.log('---');\n      console.log(response);\n      self.setState({\n        answer: response.data\n      });\n      console.log('---'); //Perform action based on response\n    }).catch(function (error) {\n      console.log(error); //Perform action based on error\n    }));\n  } //@TODO Input random word into form field\n\n\n  render() {\n    const text = this.state.text;\n    const t = this.props.t;\n    return React.createElement(React.Fragment, null, React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      className: \"auto-form-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      className: \"auto-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"Donner un mot:\"), React.createElement(Input, {\n      type: \"text\",\n      value: text,\n      onChange: this.onTextChanged,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), this.renderSuggestions(), React.createElement(\"div\", {\n      style: {\n        color: \"red\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, this.state.valueError)), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"button\",\n      onClick: this.handleRandomize,\n      value: \"Randomize\",\n      color: \"info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-random\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }), \"Randomize\"), React.createElement(Button, {\n      type: \"submit\",\n      value: \"Submit\",\n      color: \"dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"Submit\"), this.renderLoading())), React.createElement(JResults\n    /*word={this.state.value}*/\n    , {\n      definition: this.state.answer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/thomaslefebvre/git/projet-jeudemot/src/components/view/WordFormB.jsx"],"names":["React","axios","JResults","Form","Label","Input","Button","FormGroup","Spinner","words","trackPromise","withTranslation","initialState","valueError","answer","WordFormB","Component","constructor","props","onTextChanged","event","setState","value","target","console","log","suggestions","length","regex","RegExp","items","sort","filter","v","test","text","onAddItem","state","history","concat","validate","match","handleRandomize","preventDefault","get","then","response","data","catch","error","updateInput","word","loading","handleChange","bind","handleSubmit","suggestionSelected","renderSuggestions","map","item","renderLoading","isValid","self","post","headers","render","t","color"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport JResults from './JResults';\nimport { Form, Label, Input, Button, FormGroup, Spinner } from 'reactstrap';\nimport words from '../controller/words.json';\nimport { trackPromise } from 'react-promise-tracker';\nimport { withTranslation } from 'react-i18next';\n\n\nconst initialState = {\n    //value: '',\n    valueError: '',\n    answer: ''\n};\n\nexport default class WordFormB extends React.Component {\n    constructor(props) {\n    super(props);\n    this.state = {\n        value: '',\n        valueError: '', \n        answer: '',\n        history: [],\n        suggestions: [],\n        text: '',\n        loading: false\n    };\n\n    this.items = words;\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    onTextChanged = (event) => {\n        this.setState({value: event.target.value});\n        console.log(event.target.value);\n\n        const value = event.target.value;\n        let suggestions = [];\n        if(value.length > 0) {\n                const regex = new RegExp(`^${value}`, 'i');\n                suggestions = this.items.sort().filter(v => regex.test(v));\n        }\n        this.setState(() => ({ suggestions, text: value }));\n    }\n\n    suggestionSelected (value) \n    {\n        this.setState(() =>({\n            text: value,\n            suggestions: [],\n        }))\n    }\n\n    renderSuggestions() {\n        const { suggestions } = this.state;\n        if(suggestions.length === 0) {\n            return null;\n        }\n        return (\n            <ul>\n                {suggestions.map((item) => <li onClick={() => this.suggestionSelected(item)}>{item}</li>)}\n            </ul>\n        );\n    }\n\n    renderLoading() {\n        if(this.state.answer != null) {\n            return null;\n        }\n        return (\n            <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n        )\n    }\n\n    onAddItem = () => {\n        this.setState(state => {\n            const history = state.history.concat(state.value);\n        return {\n            history,\n            value: '',\n        };\n        });\n    };\n\n\n    handleChange(event) {\n        this.setState({value: event.target.value});\n        console.log(event.target.value);\n    }\n\n    validate = () => {\n        let valueError = '';\n\n        if(!this.state.value.match('^(\\w*)')) {\n            valueError = 'Invalid input, please put only one word without special characters'\n        }\n\n        if(valueError) {\n            this.setState({valueError});\n            return false;\n        }\n\n        return true;\n    };\n\n    handleSubmit(event) {\n        // testing purpose only\n        //alert('A name was submitted: ' + this.state.value);\n        event.preventDefault();\n        const isValid = this.validate();\n\n        if(isValid) {\n            console.log(this.state)\n            // clear form\n            this.setState(initialState);\n        }\n\n        //this.setState({history : this.state.value});\n        //this.onAddItem();\n        //console.log(this.state);\n\n        var self = this;\n        trackPromise(\n        axios.post('http://localhost:5000/sendform', this.state.text, {headers: { 'Content-Type': 'text/plain' }})\n        .then(function(response){\n            console.log('---')\n            console.log(response);\n\n            self.setState({ answer: response.data });\n            console.log('---')\n            //Perform action based on response\n        })\n        .catch(function(error){\n            console.log(error);\n            //Perform action based on error\n        }));\n    }\n\n    //@TODO Input random word into form field\n    handleRandomize = (event) => {\n        event.preventDefault();\n        axios.get('http://localhost:5000/randomize')\n        .then((response) => {\n            const text = response.data;\n            console.log('---')\n            console.log(response.data);\n\n            //this.setState({ value });\n            this.setState({text: response.data});\n            \n            //self.setState({ value: response.data });\n            //Perform action based on response\n        })\n        .catch((error) => {\n            console.log(error);\n            console.log('dommage');\n            //Perform action based on error\n        });\n    }\n\n    updateInput = (word) => {\n        let value = word;\n        console.log(value);\n        this.setState({value : \"third\"});\n    }\n\nrender() {\n    const { text } = this.state;\n    const { t } = this.props;\n\n\n\n    return (\n    <>\n        <Form onSubmit={this.handleSubmit} className=\"auto-form-wrapper\">\n        <FormGroup className=\"auto-form\">\n            <Label>Donner un mot:</Label>\n            <Input type=\"text\" value={text} onChange={this.onTextChanged} required />\n            {this.renderSuggestions()}\n            <div style={{color: \"red\"}}>\n                {this.state.valueError}\n            </div>\n        </FormGroup>\n        <FormGroup>\n            <Button type=\"button\" onClick={this.handleRandomize} value=\"Randomize\" color=\"info\"><i className=\"fas fa-random\"></i>Randomize</Button>\n            <Button type=\"submit\" value=\"Submit\" color=\"dark\">Submit</Button>\n            {this.renderLoading()}\n        </FormGroup>\n        </Form>\n        <JResults /*word={this.state.value}*/ definition={this.state.answer} />\n    </>\n    );\n    }\n}"]},"metadata":{},"sourceType":"module"}